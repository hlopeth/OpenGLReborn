cmake_minimum_required(VERSION 3.10)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(INCLUDE_DIR ${CMAKE_SOURCE_DIR}/include)
set(Engine_SRC_DIR ${CMAKE_SOURCE_DIR}/OpenGLReborn)

project(Engine)
    file(GLOB_RECURSE Engine_SRC "${Engine_SRC_DIR}/*.h" "${Engine_SRC_DIR}/*.cpp" "${Engine_SRC_DIR}/*.c")

    add_executable(Engine ${Engine_SRC})

    #openGL
    find_package(OpenGL REQUIRED)
    target_link_libraries(Engine PUBLIC ${OPENGL_LIBRARY})

    #glfw
    set(GLFW_DIR thirdParty/glfw)
    include_directories(${GLFW_DIR}/include/GLFW)
    add_subdirectory(${GLFW_DIR})
    target_link_libraries(Engine PUBLIC glfw)

    #zlib
    set(ZLIB_DIR thirdParty/zlib)
    include_directories(${ZLIB_DIR})
    include_directories(${CMAKE_BINARY_DIR}/thirdParty/zlib)
    add_subdirectory(${ZLIB_DIR})
    # target_link_libraries(Engine PUBLIC zlib)

    #libpng
    # include autogenerated zconf.h
    set(PNG_EXECUTABLES OFF CACHE BOOL "PNG_EXECUTABLES")
    set(PNG_TESTS OFF CACHE BOOL "PNG_TESTS")
    set(ZLIB_INCLUDE_DIR ${CMAKE_BINARY_DIR}/thirdParty/zlib)
    set(LIBPNG_DIR thirdParty/libpng)
    include_directories(${CMAKE_BINARY_DIR}/thirdParty/libpng)
    include_directories(${LIBPNG_DIR})
    add_subdirectory(${LIBPNG_DIR})
    target_link_libraries(Engine PUBLIC png_static)

    #bullet
    set(BUILD_CPU_DEMOS OFF CACHE BOOL "BUILD_CPU_DEMOS")
    set(BUILD_BULLET2_DEMOS OFF CACHE BOOL "BUILD_BULLET2_DEMOS")
    set(BUILD_EXTRAS OFF CACHE BOOL "BUILD_EXTRAS")
    set(BUILD_UNIT_TESTS OFF CACHE BOOL "BUILD_UNIT_TESTS")
    set(BUILD_BULLET3 OFF CACHE BOOL "BUILD_BULLET3")

    set(BULLET_DIR thirdParty/bullet3)
    include_directories(${BULLET_DIR}/src)
    add_subdirectory(${BULLET_DIR})
    target_link_libraries(Engine PUBLIC LinearMath)
    target_link_libraries(Engine PUBLIC BulletCollision)
    target_link_libraries(Engine PUBLIC BulletDynamics)
    
    #assimp
    set(ASSIMP_INSTALL OFF CACHE BOOL "ASSIMP_INSTALL")
    set(ASSIMP_BUILD_ASSIMP_TOOLS OFF CACHE BOOL "ASSIMP_BUILD_ASSIMP_TOOLS")
    set(ASSIMP_BUILD_TESTS OFF CACHE BOOL "ASSIMP_BUILD_TESTS")
    set(ASSIMP_DIR thirdParty/assimp)
    include_directories(${ASSIMP_DIR}/include/assimp)
    add_subdirectory(${ASSIMP_DIR})
    target_link_libraries(Engine PUBLIC assimp)

    target_include_directories(
        Engine PUBLIC
        "${PROJECT_BINARY_DIR}"
        "${INCLUDE_DIR}"
    )

    
    # set(ASSETS_DIR "${Engine_SRC_DIR}/assets")
    # add_custom_command(TARGET Engine PRE_BUILD
    #     COMMAND ${CMAKE_COMMAND} -E copy_directory
    #     ${ASSETS_DIR} $<TARGET_FILE_DIR:Engine>/assets)
    # add_custom_command(TARGET Engine POST_BUILD
    #     COMMAND ${CMAKE_COMMAND} -E make_directory $<TARGET_FILE_DIR:Engine>/assets)
    # add_custom_command(TARGET Engine POST_BUILD        
    #     COMMAND ${CMAKE_COMMAND} -E copy_if_different  
    #         ${ASSETS}      
    #         $<TARGET_FILE_DIR:Engine>/assets) 
    # file(GLOB_RECURSE SHADERS "${Engine_SRC_DIR}/*.glsl")
    # add_custom_command(TARGET Engine PRE_BUILD        
    #     COMMAND ${CMAKE_COMMAND} -E copy_if_different  
    #         ${SHADERS}      
    #         $<TARGET_FILE_DIR:Engine>) 

    # #copy dlls
    # add_custom_command(TARGET Engine POST_BUILD        
    # COMMAND ${CMAKE_COMMAND} -E copy_directory  
    #     ${CMAKE_BINARY_DIR}/lib/$<CONFIGURATION>/
    #     $<TARGET_FILE_DIR:Engine>) 

    # #copy zlib
    # add_custom_command(TARGET Engine POST_BUILD        
    #     COMMAND ${CMAKE_COMMAND} -E copy_if_different  
    #         "${LIBRARY_OUTPUT_DIRECTORY}/zlib.dll"      
    #         $<TARGET_FILE_DIR:Engine>) 

# vs specific 
set_property(TARGET Engine PROPERTY VS_DEBUGGER_WORKING_DIRECTORY "${Engine_SRC_DIR}/")
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT Engine)